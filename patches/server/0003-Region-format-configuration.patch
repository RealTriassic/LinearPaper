From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Triassic <techbyteofficial9@gmail.com>
Date: Fri, 22 Sep 2023 23:27:14 +0300
Subject: [PATCH] Region format configuration


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 6a04f0ed36bd92b408591ae81b5870f63da28f17..31da4e94e10673ecdd27dd2213575b2de3ce8ea9 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -890,7 +890,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             // Paper start - rewrite chunk system
             worldserver.save((ProgressListener) null, flush, worldserver.noSave && !force, close);
             if (flush) {
-                MinecraftServer.LOGGER.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", worldserver.getChunkSource().chunkMap.getStorageName());
+                MinecraftServer.LOGGER.info("ThreadedChunkStorage ({}): All chunks are saved", worldserver.getChunkSource().chunkMap.getStorageName()); // LinearPaper
             }
             // Paper end - rewrite chunk system
         }
@@ -914,7 +914,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 //MinecraftServer.LOGGER.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", worldserver2.getChunkSource().chunkMap.getStorageName()); // Paper - move up
             }
 
-            MinecraftServer.LOGGER.info("ThreadedAnvilChunkStorage: All dimensions are saved");
+            MinecraftServer.LOGGER.info("ThreadedChunkStorage: All dimensions are saved"); // LinearPaper
         }
 
         return flag3;
diff --git a/src/main/java/org/stupidcraft/linearpaper/LinearConfig.java b/src/main/java/org/stupidcraft/linearpaper/LinearConfig.java
index 1b74e1800ca9cf892cdf10b9c006a77e5be725ee..5e3b99cbde0aa59754fb6376af67b5e1e3a1e6e6 100644
--- a/src/main/java/org/stupidcraft/linearpaper/LinearConfig.java
+++ b/src/main/java/org/stupidcraft/linearpaper/LinearConfig.java
@@ -167,4 +167,17 @@ public class LinearConfig {
         }
         return builder.build();
     }
+
+    public static int linearFlushFrequency = 10;
+    public static int linearFlushThreads = 1;
+
+    private static void linearSettings() {
+        linearFlushFrequency = getInt("linear.flush-frequency", linearFlushFrequency);
+        linearFlushThreads = getInt("linear.flush-max-threads", linearFlushThreads);
+
+        if (linearFlushThreads < 0)
+            linearFlushThreads = Math.max(Runtime.getRuntime().availableProcessors() + linearFlushThreads, 1);
+        else
+            linearFlushThreads = Math.max(linearFlushThreads, 1);
+    }
 }
diff --git a/src/main/java/org/stupidcraft/linearpaper/LinearWorldConfig.java b/src/main/java/org/stupidcraft/linearpaper/LinearWorldConfig.java
index 4e4bafaec9b8d40ba9252d53167e34e8f684c5b8..267474bdf5969b8028a3b4573828ebd47e60d378 100644
--- a/src/main/java/org/stupidcraft/linearpaper/LinearWorldConfig.java
+++ b/src/main/java/org/stupidcraft/linearpaper/LinearWorldConfig.java
@@ -3,8 +3,10 @@ package org.stupidcraft.linearpaper;
 import java.util.List;
 import java.util.Map;
 import java.util.function.Predicate;
+import java.util.logging.Level;
 import org.apache.commons.lang.BooleanUtils;
 import org.bukkit.configuration.ConfigurationSection;
+import org.stupidcraft.linearpaper.region.RegionFileFormat;
 
 import static org.stupidcraft.linearpaper.LinearConfig.log;
 
@@ -110,4 +112,23 @@ public class LinearWorldConfig {
         final Map<String, Object> value = getMap("world-settings." + worldName + "." + path, null);
         return value.isEmpty() ? fallback : value;
     }
+
+    public RegionFileFormat regionFormat = RegionFileFormat.ANVIL;
+    public int linearCompressionLevel = 1;
+
+    private void regionFormatSettings() {
+        regionFormat = RegionFileFormat.fromString(getString("format", regionFormat.name()));
+        if (regionFormat.equals(RegionFileFormat.INVALID)) {
+            log(Level.SEVERE, "Unknown region format in linear.yml: " + regionFormat);
+            log(Level.SEVERE, "Falling back to ANVIL region file format.");
+            regionFormat = RegionFileFormat.ANVIL;
+        }
+
+        linearCompressionLevel = getInt("linear.compression-level", linearCompressionLevel);
+        if (linearCompressionLevel > 23 || linearCompressionLevel < 1) {
+            log(Level.SEVERE, "Linear region compression level should be between 1 and 22 in linear.yml: " + linearCompressionLevel);
+            log(Level.SEVERE, "Falling back to compression level 1.");
+            linearCompressionLevel = 1;
+        }
+    }
 }
diff --git a/src/main/java/org/stupidcraft/linearpaper/region/RegionFileFormat.java b/src/main/java/org/stupidcraft/linearpaper/region/RegionFileFormat.java
new file mode 100644
index 0000000000000000000000000000000000000000..64831ea14eef5cd7a9c3bcf87517ea8dd7d26795
--- /dev/null
+++ b/src/main/java/org/stupidcraft/linearpaper/region/RegionFileFormat.java
@@ -0,0 +1,16 @@
+package org.stupidcraft.linearpaper.region;
+
+public enum RegionFileFormat {
+    ANVIL,
+    LINEAR,
+    INVALID;
+
+    public static RegionFileFormat fromString(String format) {
+        for (RegionFileFormat rff : values()) {
+            if (rff.name().equalsIgnoreCase(format)) {
+                return rff;
+            }
+        }
+        return RegionFileFormat.INVALID;
+    }
+}
